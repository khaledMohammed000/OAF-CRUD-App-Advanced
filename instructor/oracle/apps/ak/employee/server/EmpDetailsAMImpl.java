package instructor.oracle.apps.ak.employee.server;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;

import oracle.apps.fnd.framework.OAViewObject;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpDetailsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public EmpDetailsAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("instructor.oracle.apps.ak.employee.server",
                                             "EmpDetailsAMLocal");
    }

    /**Container's getter for EmployeeDetailsVO1
     */
    public EmployeeDetailsVOImpl getEmployeeDetailsVO1() {
        return (EmployeeDetailsVOImpl)findViewObject("EmployeeDetailsVO1");
    }

    public void initDetails(String employeeNumber) {
        EmployeeDetailsVOImpl vo = getEmployeeDetailsVO1();
        if (vo == null) {
            MessageToken[] errTokens =
            { new MessageToken("OBJECT_NAME", "EmployeeDetailsVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        vo.initQuery(employeeNumber);
        //Manager render start
        OAViewObject appPropsVO =
            (OAViewObject)findViewObject("EmpDetailsPVO1");
        if (appPropsVO != null) {
            // Do not reinitialize the VO unless needed. Note that
            // this method call does not try to query the database for
            // VOs with no SELECT statement and only transient attributes.
            if (appPropsVO.getFetchedRowCount() == 0) {
                // Setting the match fetch size to 0 for an in-memory VO
                // prevents it from trying to query rows.  Calling
                // executeQuery() ensures that rows aren't lost after
                // a commit in the transaction (BC4J known issue
                // workaround).
                appPropsVO.setMaxFetchSize(0);
                appPropsVO.executeQuery();
                // You must create and insert a row in the VO before you
                // can start setting properties.
                appPropsVO.insertRow(appPropsVO.createRow());
                // Set the primary key value for this single-rwo VO.
                OARow row = (OARow)appPropsVO.first();
                row.setAttribute("RowKey", new Number(1));
            }
        }
        // Initialize the application properties VO (and the UI) based
        // on the default employee position value set on the underlying
        // object.
        handlePositionDisplay();
        //end
    } // end initDetails()

    /**Container's getter for EmpDetailsPVO1
     */
    public OAViewObjectImpl getEmpDetailsPVO1() {
        return (OAViewObjectImpl)findViewObject("EmpDetailsPVO1");
    }

    public void handlePositionDisplay() {
        // Get the special, single-row application properties and make
        // the first (only) row current.
        OAViewObject vo = (OAViewObject)findViewObject("EmpDetailsPVO1");
        OARow row = (OARow)vo.first();

        // Get the value of the view object attribute with the position
        // code.
        EmployeeDetailsVOImpl detailsVO = getEmployeeDetailsVO1();
        RowSetIterator renderIter =
            detailsVO.createRowSetIterator("renderIter");
        int fetchedRowCount = detailsVO.getFetchedRowCount();
        renderIter.setRangeStart(0);
        renderIter.setRangeSize(fetchedRowCount);
        EmployeeDetailsVORowImpl detailRow =
            (EmployeeDetailsVORowImpl)renderIter.getRowAtRangeIndex(0);
        String position = (String)detailRow.getAttribute("PositionDisplay");
        if ((position == null) || ("President".equals(position))) {
            row.setAttribute("ManagerDetailRendered", Boolean.FALSE);
        } else {
            row.setAttribute("ManagerDetailRendered", Boolean.TRUE);
        }
    } // end handlePositionDisplay()

}

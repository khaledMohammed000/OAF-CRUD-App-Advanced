package instructor.oracle.apps.ak.employee.server;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.RowSetIterator;

import oracle.apps.fnd.framework.OAViewObject;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public EmployeesAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
            /* Configuration Name */launchTester("instructor.oracle.apps.ak.employee.server",
                                                 "EmployeesAMLocal");
    }

    /**Container's getter for AllEmployeesVO1
     */
    public OAViewObjectImpl getAllEmployeesVO1() {
        return (OAViewObjectImpl)findViewObject("AllEmployeesVO1");
    }

    /*
         *******************************************************************
         * Deletes an employee.
         *******************************************************************
         */

    public void deleteEmployee(String employeeNumber) {
        // First, find the selected employee in your VO.
        // When you find it, call remove( ) on the row which in turn
        // calls remove on the associated EmployeeEOImpl object.
        int empToDelete = Integer.parseInt(employeeNumber);

        OAViewObject vo = (OAViewObject)getAllEmployeesVO1();
        AllEmployeesVORowImpl row = null;

        // This tells the number of rows that have been fetched in the
        // row set, and will not pull additional rows in like some of the
        // other "get count" methods.
        int fetchedRowCount = vo.getFetchedRowCount();

        // Use a separate iterator, even though you could step through the
        // rows without it, because you don't want to affect row currency.
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
        if (fetchedRowCount > 0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = (AllEmployeesVORowImpl)deleteIter.getRowAtRangeIndex(i);
                // For performance reasons, generate ViewRowImpls for all
                // VOs. When you need to obtain an attribute value,
                // use the named accessors instead of a generic String
                // lookup.

                Number primaryKey = row.getEmployeeId();
                if (primaryKey.compareTo(empToDelete) == 0) {
                    // This performs the actual delete.
                    row.remove();
                    getTransaction().commit();
                    break; // only one possible selected row in this case
                }
            }
        }
        // Always close the iterator when you're done.
        deleteIter.closeRowSetIterator();
    } // end deleteEmployee


}
